#!/usr/bin/env bash

DOTFILES_ACTION=$1
shift 1
DOTFILES_MODULES="$@"

# print a info message
dotfiles_info() {
  printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

# print a user message
dotfiles_user() {
  printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

# print a success message
dotfiles_success() {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

# print a error message
dotfiles_fail() {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

# cache directory for dotfiles commands
DOTFILES_CACHE_DIR=${DOTFILES_CACHE_DIR:-"/tmp/.dotfiles-${USER:-default}/$$"}

# clear cache directory
dotfiles_cache_clear() {
  rm -rf ${DOTFILES_CACHE_DIR} 2>/dev/null
}

# clean up dotfiles cache after bash exits.
trap dotfiles_cache_clear EXIT

# http://www.advogato.org/person/shlomif/diary.html?start=670
# What this function does is cache the result of a command in a file, and
# use the file to output the results in case it exists.
# Format is: cache "$basename_to_cache_in" $cmd $arg1 $arg2 $arg3...dotfiles_cache()
dotfiles_cache(){
    local cache_fn="$1"
    shift

    if ! test -d "${DOTFILES_CACHE_DIR}"; then
        mkdir -m 700 -p "${DOTFILES_CACHE_DIR}" 2>/dev/null
    fi

    local fn="${DOTFILES_CACHE_DIR}/$cache_fn"
    if ! test -f "$fn" ; then
        "$@" > "$fn"
    fi
    cat "$fn"
}

# find all dotfiles root directories
_dotfiles_roots() {
  case "$(uname -s)" in
  Darwin)
    find ~ -mindepth 1 -maxdepth 1 -name ".dotfiles*" | tail -r
    ;;
  SunOS)
    gfind ~ -mindepth 1 -maxdepth 1 -name ".dotfiles*" | tac
    ;;
  *)
    find ~ -mindepth 1 -maxdepth 1 -name ".dotfiles*" | tac
    ;;
  esac
}

# find all dotfiles root directories (cached version)
dotfiles_roots() {
  dotfiles_cache roots _dotfiles_roots
}

# find all dotfiles profile directories
_dotfiles_profiles() {
  while read dotfiles_root
  do
    for profile in \
      ${dotfiles_root}/os/$(uname -s) \
      ${dotfiles_root}/kernel/$(uname -s) \
      ${dotfiles_root}/kernel/All
    do
      if [ -d $profile ]; then
        echo $profile
      fi
    done
  done < <(dotfiles_roots)
}

# find all dotfiles profile directories (cached version)
dotfiles_profiles() {
  dotfiles_cache profiles _dotfiles_profiles
}

# find all dotfiles module names
_dotfiles_all_modules() {
  while read profile
  do
    case "$(uname -s)" in
    Darwin)
      find -H ${profile} -mindepth 1 -maxdepth 1 -type d -exec basename '{}' \; 2>/dev/null
      ;;
    SunOS)
      gfind -H ${profile} -mindepth 1 -maxdepth 1 -type d -exec basename '{}' \; 2>/dev/null
      ;;
    *)
      find -H ${profile} -mindepth 1 -maxdepth 1 -type d -exec basename '{}' \; 2>/dev/null
      ;;
    esac
  done < <(dotfiles_profiles) | sort -u
}

# find all dotfiles module names (cached version)
dotfiles_all_modules() {
  dotfiles_cache modules _dotfiles_all_modules
}

# find specified or all dotfiles module names
dotfiles_modules() {
  if [ -n "${DOTFILES_MODULES}" ]
  then
    for m in ${DOTFILES_MODULES}; do
      echo $m
    done
  else
    dotfiles_all_modules
  fi
}

# link a file
dotfiles_link_file () {
  local src=$1 dst=$2

  # if link is a file or directory but not already link
  if [ ! -L "$dst" ] && [ -f "$dst" -o -d "$dst" ]
  then
    rm -rf "${dst}.backup" 2>/dev/null
    mv "$dst" "${dst}.backup"
    dotfiles_success "moved $dst to ${dst}.backup"
  fi

  # if link is a link or does not exists
  if [ -L "$dst" -o ! -e "$dst" ]
  then
    if [ "$(readlink $dst)" = "$src" ]; then
      dotfiles_info "skipped $1 to $2"
    else
      ln -sf "$1" "$2"
      dotfiles_success "linked $1 to $2"
    fi
  else
    dotfiles_fail "$dst is not a link or exits!"
  fi
}

# link best maching module file
dotfiles_link_module_file() {
  local src=$1 dst=$2
  while read profile; do
    if [ -f ${profile}/${src} ]; then
      dotfiles_link_file "${profile}/${module}/${src}" "${dst}"
      break
    fi
  done < <(dotfiles_profiles)
}

# run install scripts, i.e. downlaod and install software
dotfiles_install() {
  while read module; do
    while read profile; do
      if [ -x ${profile}/${module}/dotfiles-install.sh ]; then
        bash -c ${profile}/${module}/dotfiles-install.sh
        break
      fi
    done < <(dotfiles_profiles)
  done < <(dotfiles_modules)
}

# run configuration scripts, i.e. create links, files, directories
dotfiles_configure() {
  while read module; do
    while read profile; do
      if [ -x ${profile}/${module}/dotfiles-configure.sh ]; then
        ${profile}/${module}/dotfiles-configure.sh
        break
      fi
    done < <(dotfiles_profiles)
  done < <(dotfiles_modules)
}

# log dotfiles directories
dotfiles_log() {
  if [ -n "${DOTFILES_MODULES}" ]
  then
    echo "using dotfiles folders: $(dotfiles_roots | xargs) and modules $DOTFILES_MODULES"
  else
    echo "using dotfiles folders: $(dotfiles_roots | xargs)"
  fi
}

# command line interface
if [[ "${BASH_SOURCE[0]}" == "${0}" ]] ; then
  case "${DOTFILES_ACTION}" in
  "install")
    dotfiles_log
    dotfiles_install
    ;;
  "configure")
    mkdir -p ~/bin
    dotfiles_log
    dotfiles_configure
    ;;
  "list-modules")
    dotfiles_log
    dotfiles_modules
    ;;
  "list-profiles")
    dotfiles_log
    dotfiles_profiles
    ;;
  *)
    cat <<EOF
usage: $0 install <module>
       $0 configure <module>
       $0 list-modules
       $0 list-profiles

source: $(dotfiles_roots | xargs)
EOF
    exit 1
    ;;
  esac
fi
